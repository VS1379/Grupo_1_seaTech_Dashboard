const productService = {
    async get() {
        try {
            const response = await fetch("http://localhost:3030/api/products");
            const data = await response.json();
            return data;
        } catch (error) {
            throw error;
        }
    },
 async getById(id) {
        try {
            const response = await fetch(`http://localhost:3030/api/products/${id}`);
            const data = await response.json();
            return data;
        } catch (error) {
            throw error;
        }
    },
}

export default productService;

const productService = {
    async get() {
        try {
            const response = await fetch("http://localhost:3030/api/products");
            const data = await response.json();
            return data;
        } catch (error) {
            throw error;
        }
    },
 async getById(id) {
        try {
            const response = await fetch(`http://localhost:3030/api/products/${id}`);
            const data = await response.json();
            return data;
        } catch (error) {
            throw error;
        }
    },
}

export default productService;

Listar:

Todos los usuarios ● api/users/
Deberá devolver un objeto literal con la siguiente estructura:
■ count → cantidad total de usuarios en la base.
■ users → array con la colección de usuarios, cada uno con:
● id
● name
● email
● detail → URL para obtener el detalle.


Usuarios por id ● api/users/:id
○ Deberá devolver un objeto literal con la siguiente estructura:
■ Una propiedad por cada campo en base.
■ Una URL para la imagen de perfil (para mostrar la imagen).
■ Sin información sensible (ej: password y categoría).


Todos los productos ● api/products/
○ Deberá devolver un objeto literal con la siguiente estructura:
■ count → cantidad total de productos en la base.
■ countByCategory → objeto literal con una propiedad por categoría con el total de productos.
■ products → array con la colección de productos, cada uno con:
● id
● name
● description
● un array con principal relación de uno a muchos (ej: categories).
● detail → URL para obtener el detalle.


Productos por id ● api/products/:id
○ Deberá devolver un objeto literal con la siguiente estructura:
■ una propiedad por cada campo en base.
■ un array por cada relación de uno a muchos (categories, colors, sizes, etc).
■ Una URL para la imagen del producto (para mostrar la imagen).

El dashboard deberá contener al menos:
● 3 a 6 paneles simples con los siguientes totales:
○ Total de productos
○ Total de usuarios
○ Total de categorías
● Panel de detalle de último producto o usuario creado.
● Panel de categorías con el total de productos de cada una.
● Panel con el listado de productos.

(Opcional) Funcionalidades adicionales:
● Total de productos vendidos / total de ventas.
● Últimos 5 productos vendidos / los 5 más vendidos.
● Vista de creación de productos como Administrador.
● Vista de edición de productos como Administrador.
● Opción de eliminar productos como Administrador.